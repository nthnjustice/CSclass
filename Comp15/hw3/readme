Hello Grader,

I'm going to describe my program from the inner-most level and work myself out.

The first level is a dynamic array of Workers. A Worker processes package units in a queue at a rate defined by their single member variable. Their rate is sent in from main(). Even though this program is intended to handle only a single Worker, I made the structure a dynamic array anticipating the need for multiple Workers in the second version of this assignmnet. 

The dynamic array of Workers is stored in an AssemblyLine. Essentially, an AssemblyLine is a means of storing a dynamic array of workers. In the factory class, there exists a pointer to a dynamic array of AssemblyLines. I did this anticipating the need for multiple AssemblyLines, each with their own array of Workers, in the next version of this assignment. 

A linked-list queue is declared in the Factory class and implemented as its own class. The linked-list has Nodes that have a struct called Package and a pointer to another Node. The Package struct is what the relevant information from the input is stored in. Packages are what is processed in this program. They are the fuel for the simulation. A Package has an order-number,  a number of units, and an arrival-time. The queue class (PackQ) inserts packages from main into the back of the linked-list and removes packages for processing at the front of the linked-list.

The Factory class is the overlying simulation manager for the program. It calls a function to start the simulation (run()) and it calls a function that parses the input for relevant Package information. The Factory class keeps track of the "time" of the simulation. It also gives a Worker a Package and executes the processing procedure with a function called (doWork()). Lastly, the Factory class has a print function called output() that sends spits out information about the simulation's processing of packages. 
