#include <iostream>
#include <stdio.h>
#include "hector.h"

using namespace std;
//
// hector.cpp -- compare three different collision solutions
//
// your job: code the insert functions
//  our job: run the three insert functions and report results
//

// constructor
Hector::Hector()
{
	for(int i = 0; i < TSIZE; i++)
	{
		cheneyTable[i] = NULL;
		linnyTable[i] = -1;
		doublesTable[i] = -1;
	}
}


// linear probing
//
//  returns number of collisions before finding a spot
//
int Hector::linny(int value)
{
	int attempt = 1;
	int index = (3*value + 7) % 17;
	bool found = false;
	while(!found)
	{
		//YOUR CODE HERE
			if(linnyTable[index] == SENTINEL){
				found = true;
				linnyTable[index] = value;
			}
			else{
				index ++;
				if(index > TSIZE){
					index = 0;
				}
			}
	}
	return attempt;
}

// double hashing using a second function
//  
//  returns number of collisions before finding a spot
//
int Hector::doubles(int value)
{
	int attempt = 1;
	int index = (3*value + 7) % 17;
	int jump = 13 - (3*value % 13); //equivalent to second function
	bool found = false;
	//YOUR CODE HERE
	while(!found){
		if(doublesTable[index] == SENTINEL){
			found = true;
			doublesTable[index] = value;
		}
		else{
			attempt++;
			index += jump;
		}
	}
	
		return attempt; 
}

// chained hashing -- each spot in table is a linked list 
//
//  returns number of items in that spot before insertion
//
int Hector::cheney(int value)
{
	//YOUR CODE HERE
	int num = 1;
	int index = (3*value + 7) % 17;
	Node* iter = cheneyTable[index];
	Node* temp = cheneyTable[index];
	Node* temp2 = new Node;
	
	if(cheneyTable[index] == NULL){
		cheneyTable[index] = new Node;
		cheneyTable[index]->key = value;
		cheneyTable[index]->next = NULL;
		return 1;
	}
	
	temp2->key = cheneyTable[index];
	while(iter->next != NULL){
		iter = iter->next;
	}
	iter->next = temp2;
	iter = temp;
	
	while(iter->next != NULL){
		iter = iter-> next;
		num++;
	}
	
	return num;
}

// print the hash tables
void Hector::print()
{
	for(int i=0; i < TSIZE; i++)
	{
		cout << linnyTable[i] << " ";
		
	}
	
	cout << endl;
	
	for(int i=0; i < TSIZE; i++)
	{
		cout << doublesTable[i] << " ";
		
	}
	cout << endl;
	
	Node* iter = NULL;
	for(int i=0; i < TSIZE; i++)
	{
		iter = cheneyTable[i];
		cout << " [";
		while(iter != NULL)
		{
			cout << iter->key << " ";
			iter = iter->next;
		}
		cout << "]";
	}
	cout << endl;
}
