Hello Grader,

I'm going to describe my program from the inner-most level and work myself out.

The first level is a dynamic array of Workers. A Even though this program is intended to handle only a single Worker, I made the structure a dynamic array anticipating the need for multiple Workers in the second version of this assignmnet. 

The first level is an AssemblyLine. Essentially, an AssemblyLine is a means of storing a worker. A Worker processes package units in a queue at a rate defined by their single member variable. Their rate is sent in from main(). In the factory class, there exists a pointer to a dynamic array of AssemblyLines. Each AssemblyLine has an instance of a linked-list queue of packages that are to be processed. The packages to be processed are allocated to the particular AssemblyLine queue from the dispatcher present in the Factory class.

A linked-list queue is declared in the Factory class and implemented as its own class. The linked-list has Nodes that have a struct called Package and a pointer to another Node. The Package struct is what the relevant information from the input is stored in. Packages are what is processed in this program. They are the fuel for the simulation. A Package has an order-number,  a number of units, and an arrival-time. The queue class (PackQ) inserts packages from main into the back of the linked-list and removes packages for processing at the front of the linked-list.

The Factory class is the overlying simulation manager for the program. It has a queue that takes packages from the buffer function. It calls a function to start the simulation (run()) and it calls a function that parses the input for relevant Package information (buffer function). The Factory class keeps track of the "time" of the simulation. It also gives a Worker a Package and executes the processing procedure with a function called (doWork()). The Factory class has a print function called output() that sends spits out information about the simulation's processing of packages. Laslty, the Factory class has a dispatcher function. The dispatcher allocates packages from the factory queue to a particular assemblyLine depending on the implementation. 

Factory implementations:
factoryP - dispatcher gives packages to the assemblyLine with the least number of packages
factoryU - dispatcher gives packages to the assemblyLine with the least number of total units
factoryT - dispatcher gives packages to the assemblyLine with the least number of total units divided by the worker rate

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOTICE!
My program does not account for packages that arrive at the same time :( !
